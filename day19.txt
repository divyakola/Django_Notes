ex:
----
create a django project with model forms?

step1:
-----
to create a django project
	
D:\siva\django5pm@april2024>sivavenv\scripts\activate

D:\siva\django5pm@april2024>()

(sivavenv) D:\siva\django5pm@april2024>django-admin startproject proj22

step2:
-----
goto project location and to create an application in our project

(sivavenv) D:\siva\django5pm@april2024>cd proj22

(sivavenv) D:\siva\django5pm@april2024\proj22>python manage.py startapp app22

step3:
-----
to install our application in the settings.py file of the project.

	settings.py
	----------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app22'
]

step4:
-----
to install mysql database server related django database API

(sivavenv) D:\siva\django5pm@april2024\proj22>pip install mysqlclient

step5:
-----
to create a database in mysql server

mysql> create database proj22db;
Query OK, 1 row affected (0.03 sec)

step6:
-----
to configure the mysql database settings in the settings.py file of the project.

	settings.py
	------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'proj22db',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}

step7:
-----
to define a models in the models.py file of the application

	models.py
	---------
from django.db import models

# Create your models here.
class Employee(models.Model):
    eid=models.IntegerField(primary_key=True)
    ename=models.CharField(max_length=30,blank=True)
    esal=models.DecimalField(max_digits=6,decimal_places=2)
    dno=models.IntegerField()
    status=models.BooleanField(default=False)
    email=models.EmailField(null=True,blank=True)
    doj=models.DateField()

step8:
-----
to check the errors in our model class

(sivavenv) D:\siva\django5pm@april2024\proj22>python manage.py check
System check identified no issues (0 silenced).

step9:
------
to create a model

(sivavenv) D:\siva\django5pm@april2024\proj22>python manage.py makemigrations
Migrations for 'app22':
  app22\migrations\0001_initial.py
    - Create model Employee

step10:
------
to create a tables in the specified database server

(sivavenv) D:\siva\django5pm@april2024\proj22>python manage.py migrate

step11:
------
to create a model forms in the forms.py file of the application.

	forms.py
	--------
from django import forms
from .models import Employee

class EmployeeForm(forms.ModelForm):
    class Meta:
        model=Employee
        fields="__all__"

step12:
------
to create a templates folder and to set the path for our templates in the settings.py file of the project.

	settings.py
	-----------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

step13:
------
to create a views in the views.py file of the application.

	views.py
	--------
from django.shortcuts import render
from .forms import EmployeeForm
from .models import Employee

# Create your views here.
def emp_input_data(request):
    emp_form_obj=EmployeeForm()
    return render(request,'input.html',{'eform':emp_form_obj})

def emp_data_insertion(request):
    emp_form_obj=EmployeeForm(request.POST)
    if emp_form_obj.is_valid():
        emp_form_obj.save()
        return render(request,'insertion_result.html')

def emp_data_display(request):
    data=Employee.objects.all()
    return render(request,'display.html',{'records':data})

	input.html
	-----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <form action="insert" method="post">
        {% csrf_token %}
        {{ eform.as_p }}
        <input type="submit" value="submit">
    </form>
</body>
</html>

	insertion_result.html
	---------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <h1>Inserted Successfully</h1>
    <br><br>
    <a href="/in">Click Here to Insert another Employee Data</a>
    <br>
    <a href="/result">Click Here to Display the Employee Data</a>
</body>
</html>

	display.html
	------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <table border="2px">
        <tr>
            <th>Emp_Id</th>
            <th>Emp_Name</th>
            <th>Emp_Salaray</th>
            <th>Emp_Dept_No</th>
            <th>Emp_Status</th>
            <th>Emp_Email_Id</th>
            <th>Emp_Date_Of_Joining</th>
        </tr>
        {% for rec in records %}
           <tr>
               <td>{{ rec.eid }}</td>
               <td>{{ rec.ename }}</td>
               <td>{{ rec.esal }}</td>
               <td>{{ rec.dno }}</td>
               <td>{{ rec.status }}</td>
               <td>{{ rec.email }}</td>
               <td>{{ rec.doj }}</td>
           </tr>
        {% endfor %}
    </table>
    <br><br>
    <a href="/in">Click Here to Insert another Employee data</a>
</body>
</html>

step14:
------
to configure the url patterns for our views in the urls.py file of the project.

	urls.py
	--------
from django.contrib import admin
from django.urls import path,re_path
from app22 import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('in/',views.emp_input_data),
    re_path('insert',views.emp_data_insertion),
    path('result/',views.emp_data_display)
]


step15:
------
to start the server

	python manage.py runserver

step16:
------
to send the request to the server

	http://127.0.0.1:8000/in

structure:
-----------
	proj22
	  |--->app22
	  |      |--->models.py
	  |      |--->forms.py
	  |      |--->views.py
	  |--->proj22
	  |      |--->settings.py
	  |      |--->urls.py
	  |--->templates
	  |      |--->input.html
	  |      |--->insertion_result.html
	  |      |--->display.html
	  |--->manage.py


ex:
---
	input.html
	----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <form action="insert" method="post">
        {% csrf_token %}
        <table>
            <tr>
                <th>Enter Employee Id:</th>
                <td> {{ eform.eid }}</td>
            </tr>
            <tr>
                <th>Enter Employee Name:</th>
                <td> {{ eform.ename }}</td>
            </tr>
            <tr>
                <th>Enter Employee Salary:</th>
                <td> {{ eform.esal }}</td>
            </tr>
            <tr>
                <th>Enter Employee Dept.No:</th>
                <td> {{ eform.dno }}</td>
            </tr>
            <tr>
                <th>Enter Employee Status:</th>
                <td> {{ eform.status }}</td>
            </tr>
            <tr>
                <th>Enter Employee Email Id:</th>
                <td> {{ eform.email }}</td>
            </tr>
            <tr>
                <th>Enter Employee Date of Joining:</th>
                <td> {{ eform.doj }}</td>
            </tr>
        </table>
        <br>
        <input type="submit" value="submit" style="margin-left:250px">
    </form>
</body>
</html>	


ex:
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <form action="insert" method="post">
        {% csrf_token %}
        Enter Employee Id: {{ eform.eid }}<br>
        Enter Employee Name: {{ eform.ename }}<br>
        Enter Employee Salary: {{ eform.esal }}<br>
        Enter Employee Dept.No: {{ eform.dno }}<br>
        Enter Employee Status: {{ eform.status }}<br>
        Enter Employee Email Id: {{ eform.email }}<br>
        Enter Employee Date of Joining: {{ eform.doj }}
        <br>
        <input type="submit" value="submit" style="margin-left:250px">
    </form>
</body>
</html>

	
note:
------
	as_p	--> paragraph

	as_table  --> table format

	as_ul	--> unordered list format

ex:
---
<form>
    <table>
        {{ eform.as_table}}
    </table>
        <input type="submit" value="insert">
</form>	

ex:
---
<form>
    <ul>
        {{ eform.as_ul}}
    </ul>
        <input type="submit" value="insert">
</form>


Widgets:
---------
A widget is Django’s representation of an HTML input element. 

The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget.

Specifying widgets:
--------------------
Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed.

if you want to use a different widget for a field, you can use the widget argument on the field definition. For example:

from django import forms


class CommentForm(forms.Form):
    name = forms.CharField()
    url = forms.URLField()
    comment = forms.CharField(widget=forms.Textarea)

Built-in Field classes:
--------------------
Naturally, the forms library comes with a set of Field classes that represent common validation needs. This section documents each built-in field.

For each field, we describe the default widget used if you don’t specify widget.

	BooleanField	--> Default widget: CheckboxInput
	CharField	--> Default widget: TextInput
	ChoiceField	--> Default widget: Select
	DateField	--> Default widget: DateInput
	DateTimeField	--> Default widget: DateTimeInput
	DecimalField	--> Default widget: NumberInput when Field.localize is False,
			    else TextInput.
	DurationField	--> Default widget: TextInput
	EmailField	--> Default widget: EmailInput
	FileField	--> Default widget: ClearableFileInput
	FilePathField	--> Default widget: Select
	FloatField	--> Default widget: NumberInput when Field.localize is False, 
			    else TextInput.

	GenericIPAddressField --> A field containing either an IPv4 or an IPv6 address.
			      --> Default widget: TextInput

	ImageField	--> Default widget: ClearableFileInput

	IntegerField	--> Default widget: NumberInput when Field.localize is False, 
			    else TextInput.

	JSONField	--> A field which accepts JSON encoded data for a JSONField.
			--> Default widget: Textarea

	MultipleChoiceField --> Default widget: SelectMultiple
	
	URLField	--> Default widget: URLInput

	TimeField	--> Default widget: TimeInput

	UUIDField	--> Default widget: TextInput


EX:
---
from django import forms

BIRTH_YEAR_CHOICES = ["1980", "1981", "1982"]
FAVORITE_COLORS_CHOICES = {
    "blue": "Blue",
    "green": "Green",
    "black": "Black",
}



class SimpleForm(forms.Form):
    birth_year = forms.DateField(
        widget=forms.SelectDateWidget(years=BIRTH_YEAR_CHOICES)
    )
    favorite_colors = forms.MultipleChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=FAVORITE_COLORS_CHOICES,
    )
