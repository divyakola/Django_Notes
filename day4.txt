what is HTTP?
-------------
HTTP(Hyper Text Transfer Protocol) is a one web protocol,which is used to enable the communication between the client and server.

whenever we are sending the request to the server through HTTP protocol to generate the HttpReq object.

whenever we are getting the response from the server through HTTP protocol to generate the HttpRes object

the http request methods are get(),post(),put(),delete(),move(),trace(),...

the most of web application development cases we are using only get() and post() methods.

at the time of implementing the API's,in that case we are using get(),post(),put() and delete() methods.


Differencess between get() and post() methods:
----------------------------------------------
			get()
			------
1).mainly,the get() is used to get the data from the server and to send/post small ammount of data to the server also.

2).get request is a default request

3).we can made the get request by using following options:
	1).type the url on the browser and press enter
	2).by clicking on hyper-links
	3).by submitting the form 

4).the get() dont provide any security

5).the get() is not suitable for to sending the sensitive information

6).the get() is not suitable for uploading the files and images.

7).whenever we are using get(),our query string is appended to the url

			post()
			-------
1).the post() is used to post the small,medium and large ammount of data to the server.

2).post request is a custom/manual request

3).we can made the post request by using following option:
	1).by submitting the form with method attribute value is post

4).the post() to provide the security

5).the post() is suitable for to sending the sensitive information

6).the post() is suitable for uploading the files and images

7).whenever we are using post(),our query string is not appended to the url


whenever we are sending the request to the server by using get() in that case getreq object is created.

the getreq object will be stored into the GET variable.

the getreq object is same like as a dict object in python.

if we want to retreive the values from the getreq object,in that case we are using hashing concept.

	syntax
	------
	requestobj.GET['name']

whenever we are sending the request to the server by using post() in that case postreq object is created.

the postreq object will be stored into the POST variable.

the postreq object is same like as a dict object in python.

if we want to retreive the values from the postreq object,in that case we are using hashing concept.

	syntax
	------
	requestobj.POST['name']



what is template?
-------------------
a template is a html file ,in which we can include python code by using some template languages.

template language?
-----------------
a template language is a special language,it will provides html code reusability.

Django Template Language(DTL) i.e. Djnago,it is by default

Jinja2 is a another template language

template variable?
-----------------
any text which is sourounded by double curly braces is known as a template variable.

	{{ variable }}

template tag?
-----------
any block/text which is sourounded by single curly-brace and percentile,that text is called template tag.

	{% tag %}

ex:
---
create a django project to display the hello world on the web browser through templates?

step1:
-----
to create a django project

D:\siva\django5pm@april2024>sivavenv\scripts\activate

(sivavenv) D:\siva\django5pm@april2024>django-admin startproject proj5

step2:
----
goto project location and to create an application in our project folder.

(sivavenv) D:\siva\django5pm@april2024>cd proj5

(sivavenv) D:\siva\django5pm@april2024\proj5>python manage.py startapp app5

step3:
------
to install our application in the settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app5'
]

step4:
-----
to create a templates folder and to set the path for our templates in the settings.py file of the project.

	settings.py
	-----------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

step5:
-----
to create a views in the views.py file of the application

	views.py
	--------
from django.shortcuts import render

# Create your views here.
def welcome(request):
    msg="hello world"
    return render(request,'sample.html',{'message':msg})

	sample.html
	-----------
<!DOCTYPE html>
<html lang="en">
<head>    
    <title>Document</title>
</head>
<body>
    <h1 style="color:red;text-align: center;background-color: yellow;">
        {{ message }}
    </h1>
</body>
</html>

step6:
-----
to configure the url patterns for our views in the urls.py file of the project.

	urls.py
	-------
from django.contrib import admin
from django.urls import path
from app5 import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('wel/',views.welcome)
]

step7:
-----
to apply the migrations

	python manage.py migrate

step8:
-----
to start the server

	python manage.py runserver

step9:
-----
to send the request to the server

	http://127.0.0.1:8000/wel

structure:
---------
	proj5
          |--->app5
          |     |--->views.py
	  |--->proj5
          |     |--->settings.py
          |     |--->urls.py
          |--->templates
          |     |--->sample.html
          |--->manage.py


